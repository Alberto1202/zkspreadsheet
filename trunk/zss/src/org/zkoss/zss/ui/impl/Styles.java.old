/* StyleUtil.java

{{IS_NOTE
	Purpose:
		
	Description:
		
	History:
		Jun 16, 2008 2:50:27 PM     2008, Created by Dennis.Chen
}}IS_NOTE

Copyright (C) 2007 Potix Corporation. All Rights Reserved.

{{IS_RIGHT
	This program is distributed under GPL Version 2.0 in the hope that
	it will be useful, but WITHOUT ANY WARRANTY.
}}IS_RIGHT
*/
package org.zkoss.zss.ui.impl;

import org.zkoss.util.logging.Log;
import org.zkoss.zss.model.BorderLineStyle;
import org.zkoss.zss.model.BorderStyle;
import org.zkoss.zss.model.Cell;
import org.zkoss.zss.model.FontStyle;
import org.zkoss.zss.model.FontUnderline;
import org.zkoss.zss.model.Format;
import org.zkoss.zss.model.Sheet;
import org.zkoss.zss.model.TextHAlign;
import org.zkoss.zss.model.impl.BorderStyleImpl;
import org.zkoss.zss.model.impl.FormatImpl;

/**
 * A utility class to help spreadsheet set style of a cell
 * @author Dennis.Chen
 *
 */
public class Styles {
	private static final Log log = Log.lookup(Utils.class);
	
	private static Format cloneCellFormat(Cell cell){
		Format format = cell.getFormat();
		if(format==null){
			format = new FormatImpl();
		}else if((format instanceof FormatImpl)){
			try {
				format = (FormatImpl)((FormatImpl)format).clone();
			} catch (CloneNotSupportedException e) {
				log.warning(e);
			}
		}else{
			log.warning("not "+FormatImpl.class +":"+format.getClass());
		}
		return format;
	}
	
	public static void setFontColor(Sheet sheet,int row,int col,String color){
		Cell cell = Utils.getOrCreateCell(sheet,row,col);
		if(cell!=null){
			Format format = cloneCellFormat(cell);
			if(format instanceof FormatImpl){
				((FormatImpl)format).setFontColor(color);
				cell.setFormat(format);
			}
		}
	}
	
	public static void setFillColor(Sheet sheet,int row,int col,String color){
		Cell cell = Utils.getOrCreateCell(sheet,row,col);
		if(cell!=null){
			Format format = cloneCellFormat(cell);
			if(format instanceof FormatImpl){
				((FormatImpl)format).setFillColor(color);
				cell.setFormat(format);
			}
		}
	}
	
	public static void setTextWrap(Sheet sheet,int row,int col,boolean wrap){
		Cell cell = Utils.getOrCreateCell(sheet,row,col);
		if(cell!=null){
			Format format = cloneCellFormat(cell);
			if(format instanceof FormatImpl){
				((FormatImpl)format).setTextWrap(wrap);
				cell.setFormat(format);
			}
		}
	}
	
	public static void setFontSize(Sheet sheet,int row,int col,int size){
		Cell cell = Utils.getOrCreateCell(sheet,row,col);
		if(cell!=null){
			Format format = cloneCellFormat(cell);
			if(format instanceof FormatImpl){
				((FormatImpl)format).setFontSize(size);
				cell.setFormat(format);
			}
		}
	}
	
	public static void setFontStrikethrough(Sheet sheet,int row,int col,boolean b){
		Cell cell = Utils.getOrCreateCell(sheet,row,col);
		if(cell!=null){
			Format format = cloneCellFormat(cell);
			if(format instanceof FormatImpl){
				((FormatImpl)format).setFontStrikethrough(b);
				cell.setFormat(format);
			}
		}
	}
	
	public static void setFontType(Sheet sheet,int row,int col,String type){
		Cell cell = Utils.getOrCreateCell(sheet,row,col);
		if(cell!=null){
			Format format = cloneCellFormat(cell);
			if(format instanceof FormatImpl){
				((FormatImpl)format).setFontType(type);
				cell.setFormat(format);
			}
		}
	}
	public static void setBorder(Sheet sheet,int row,int col,String color,BorderLineStyle linestyle){
		BorderStyle bs = new BorderStyleImpl(color,linestyle);
		setBorder(sheet,row,col,bs,0xF);
	}
	public static void setBorderTop(Sheet sheet,int row,int col,String color,BorderLineStyle linestyle){
		BorderStyle bs = new BorderStyleImpl(color,linestyle);
		setBorder(sheet,row,col,bs,0x4);
	}
	public static void setBorderLeft(Sheet sheet,int row,int col,String color,BorderLineStyle linestyle){
		BorderStyle bs = new BorderStyleImpl(color,linestyle);
		setBorder(sheet,row,col,bs,0x8);
	}
	public static void setBorderBottom(Sheet sheet,int row,int col,String color,BorderLineStyle linestyle){
		BorderStyle bs = new BorderStyleImpl(color,linestyle);
		setBorder(sheet,row,col,bs,0x1);
	}
	public static void setBorderRight(Sheet sheet,int row,int col,String color,BorderLineStyle linestyle){
		BorderStyle bs = new BorderStyleImpl(color,linestyle);
		setBorder(sheet,row,col,bs,0x2);
	}
	
	public static void setBorder(Sheet sheet,int row,int col,BorderStyle bs,int at){
		Cell cell = Utils.getOrCreateCell(sheet,row,col);
		if(cell!=null){
			Format format = cloneCellFormat(cell);
			if(format instanceof FormatImpl){
				if((at&0x08)!=0)((FormatImpl)format).setBorderLeft(bs);
				if((at&0x04)!=0)((FormatImpl)format).setBorderTop(bs);
				if((at&0x02)!=0)((FormatImpl)format).setBorderRight(bs);
				if((at&0x01)!=0)((FormatImpl)format).setBorderBottom(bs);
				cell.setFormat(format);
			}
		}
	}
	
	public static void setFontStyle(Sheet sheet,int row,int col,FontStyle style){
		Cell cell = Utils.getOrCreateCell(sheet,row,col);
		if(cell!=null){
			Format format = cloneCellFormat(cell);
			if(format instanceof FormatImpl){
				((FormatImpl)format).setFontStyle(style);
				cell.setFormat(format);
			}
		}
	}
	
	public static void setFontUnderline(Sheet sheet,int row,int col,FontUnderline underline){
		Cell cell = Utils.getOrCreateCell(sheet,row,col);
		if(cell!=null){
			Format format = cloneCellFormat(cell);
			if(format instanceof FormatImpl){
				((FormatImpl)format).setFontUnderline(underline);
				cell.setFormat(format);
			}
		}
	}
	
	public static void setTextHAlign(Sheet sheet,int row,int col,TextHAlign textHAlign){
		Cell cell = Utils.getOrCreateCell(sheet,row,col);
		if(cell!=null){
			Format format = cloneCellFormat(cell);
			if(format instanceof FormatImpl){
				((FormatImpl)format).setTextHAlign(textHAlign);
				cell.setFormat(format);
			}
		}
	}
	
	
}
